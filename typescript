Script started on Mon 17 Sep 2018 09:12:28 PM EDT
llw5@gold26:~/cs112/proj01$ c ls
Application.cpp  PlayList.h	     Song.h		 testSongs.txt
Application.h	 PlaylistTester.cpp  SongTester.cpp	 testSong.txt
main.cpp	 PlaylistTester.h    SongTester.h	 typescript
PlayList.cpp	 Song.cpp	     testSongOutput.txt
llw5@gold26:~/cs112/proj01$ cat *.h
/*
 * Lorrayya Williams
 *	for CS 112 Project 1
 *  Created on: Sep 16, 2018
 *      Author: llw5
 */

#ifndef APPLICATION_H_
#define APPLICATION_H_

class Application {
public:
	Application();
	void interface();
private:
};

#endif /* APPLICATION_H_ */
/*
 * PlayList.h
 *Lorrayya Williams
 *  Created on: Sep 11, 2018
 *  Begun by: Joel Adams, for CS 112 at Calvin College.
 *      Author: llw5
 */

#ifndef PLAYLIST_H_
#define PLAYLIST_H_

#include "Song.h"
#include <vector>   // STL vector
#include <string>
using namespace std;

class PlayList {
public:
	PlayList(const string& fileName);
	unsigned getNumSongs() const;
	vector<Song> searchByArtist(const string& artist) const;
	vector<Song> searchByYear(unsigned year) const;
	vector<Song> searchByTitlePhrase(const string& phrase) const;
	void addSong(const Song& newSong);
	void removeSong(const Song& aSong);
	void save() const;
private:
	vector<Song> mySongs;

};

#endif /* PLAYLIST_H_ */
/*
 * PlaylistTester.h tests the Playlist Class
 *Lorrayya Williams
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 *  Sep 15, 2018
 * Author: llw5
 */

#ifndef PLAYLISTTESTER_H_
#define PLAYLISTTESTER_H_

class PlaylistTester {
public:
	void runTests();
	void testConstructors();
	void testSearchByArtist();
	void testsearchbyYear();
	void testsearchbyTitlePhrase();
	void testaddSong();
	void testremovesong();
	void testsave();

};

#endif /* PLAYLISTTESTER_H_ */
/*
 * Song.h
 *
 *  Created on: Sep 15, 2018
 *      Author: llw5
 */

#ifndef SONG_H_
#define SONG_H_

#include <string>
#include <iostream>
#include <cstdlib>

using namespace std;

class Song {
public:
	Song();
	Song(const string& title, const string& artist, unsigned year);
	void writeTo(ostream& out) const;
	void readFrom(istream& in);
	string getTitle() const;
	string getArtist() const;
	unsigned getYear() const;
	bool operator==(const Song& song2);
	bool operator!=(const Song& song2);


private:
	string myTitle;
	string myArtist;
	unsigned myYear;
};

#endif /* SONG_H_ */
/*
 * SongTester.h declares a test-class for class Song.
 * Lorrayya Williams
 *  *
 *  Created on: Sep 15, 2018
 *      Author: llw5
 *	Begun by: Joel Adamas, for CS 112 at Calvin College.
 */

#ifndef SONGTESTER_H_
#define SONGTESTER_H_
#include <fstream>

class SongTester {
public:
	SongTester();
	void runTests();
	void testConstructors();
	void testReadFrom();
	void testWriteTo();
	void testoperator();
};

#endif /* SONGTESTER_H_ */
llw5@gold26:~/cs112/proj01$ cat.  *.cpp
/*
 * Lorrayya Williams
 * For CS 112 Project 1
 *  Created on: Sep 15, 2018
 *
 */

#include "Application.h"
#include "PlayList.h"
#include <vector>
#include <string>
#include "Song.h"
#include <fstream>
#include <iostream>
Application::Application() {


}


void Application::interface() {

	// intializes the variables.
	unsigned option = 0;
	string artist = "";
	unsigned year = 0;
	string title = "";

	PlayList pList("testSongs.txt");
	while (true) {
		cout << "Welcome to the Playlist Manager! \n"  << flush;
		cout << "Please enter: \n" << flush;
		cout << " 1 - to search the playlist for songs by a given artist \n" << flush;
		cout << " 2 - to search the playlist for songs from a given year \n" << flush;
		cout << " 3 - to search the playlist for songs with a given phrase in their title \n" << flush;
		cout << " 4 - to add a new song to the playlist \n" << flush;
		cout << " 5 - to remove a song from the playlist \n" << flush;
		cout << " 6 - to save the playlist \n" << flush;
		cout << " 0 - to exit program \n" << flush;
		cin >> option;
		cin.ignore();
		if (option == 0 ){
			//quits function
			break;
		}
		if(option == 1) {
			// Begins search by artist function
			cout << "Enter Artist: " << flush;
			getline(cin, artist);
			vector<Song> searchResult = pList.searchByArtist(artist);
			if (searchResult.size() == 0) {
				cout << "There are no songs by that artist.\n" << flush;
			}
			else {
			//returns the song
				for ( unsigned i = 0; i< searchResult.size(); ++i){
					cout << searchResult[i].getArtist() << endl;
					cout << searchResult[i].getTitle() << endl;
					cout << searchResult[i].getYear() << endl;
				}
			}

		}
		if(option == 2) {
			//Begins Search for song in a particular year
			cout << "Enter Year: " << flush;
			cin >> year;
			cin.ignore();
			vector<Song> searchResult = pList.searchByYear(year);
			if (searchResult.size() == 0) {
				cout << "There was no song from that year found in the playlist. \n" << flush;
			}
			//returns the song
			for (unsigned i = 0; i < searchResult.size(); ++i){
				cout << searchResult[i].getArtist() << endl;
				cout << searchResult[i].getTitle() << endl;
				cout << searchResult[i].getYear() << endl;
			}

		}
		if(option == 3){
			//Initiates the search for song by title function
			cout << "Enter Title: " << endl;
			getline(cin, title);
			vector<Song> searchResult = pList.searchByTitlePhrase(title);
			if (searchResult.size() == 0) {
				cout << "There are no songs by that artist.\n" << flush;
			}
			else {
				//returns the song
				for ( unsigned i = 0; i< searchResult.size(); ++i){
					cout << searchResult[i].getArtist() << endl;
					cout << searchResult[i].getTitle() << endl;
					cout << searchResult[i].getYear() << endl;
				}
			}

		}
		if (option == 4) {
		//Initiates Add New Song
			cout << "Enter Aritst: " << flush;
			getline(cin, artist);
			cout << "Enter Title: ";
			getline(cin, title);
			cout << "Enter Year: ";
			cin >> year;
			cin.ignore();
			Song s(title, artist, year);
			pList.addSong(s);

		}
		if (option ==5) {
			// Initiates the Remove Song Method
			cout << "Enter A song to Remove \n" << flush;
			cout << "Enter Aritst: " << flush;
			getline(cin, artist);
			cout << "Enter Title: ";
			getline(cin, title);
			cout << "Enter Year: ";
			cin >> year;
			cin.ignore();
			Song s(title, artist, year);
			pList.removeSong(s);
		}
		if (option == 6) {
			// Initiates the Save Method
			pList.save();
		}
	}
}

/*
 * main.cpp
 *
 *  Created on: Sep 11, 2018
 *      Author: llw5
 */
   /* main.cpp tests the classes in our project.
    * Student Name: Lorrayya Williams
    * Date: September 11, 2018
    * Begun by: Joel Adams, for CS 112 at Calvin College.
    */
#include "SongTester.h"
#include "PlaylistTester.h"
#include "Application.h"

int main() {
	SongTester sTester;
    sTester.runTests();
    PlaylistTester plTester;
    plTester.runTests();
    Application app;
    app.interface();
}
/*
 * PlayList.cpp
 *Lorrayya Williams
 *  Created on: Sep 11, 2018
 *  Begun by: Joel Adams, for CS 112 at Calvin College
 *      Author: llw5
 */

#include "PlayList.h"	// Playlist Class
#include "Song.h"		// Song Class
#include <fstream>      // ifstream
#include <cassert>      // assert()
#include <iostream>
#include <list>
using namespace std;

/* PlayList constructor
 * @param: fileName, a string
 * Precondition: fileName contains the name of a playlist file.
 */
PlayList::PlayList(const string& fileName) {
	// open a stream to the playlist file
	ifstream fin( fileName.c_str() );
	assert( fin.is_open() );

	// read each song and append it to mySongs
	Song s;
	string separator;
	while (true) {
		s.readFrom(fin);
		if ( !fin ) { break; }
		getline(fin, separator);
		mySongs.push_back(s);
	}

	// close the stream
	fin.close();
}

/* Retrieve length of the playlist
 * Return: the number of songs in the playlist.
 */
unsigned PlayList::getNumSongs() const {
	return mySongs.size();
}

/* Search by artist
 * @param: artist, a string.
 * Return: a vector containing all the Songs in mySongs by artist.
 */
vector<Song> PlayList::searchByArtist(const string& artist) const {
	vector<Song> v;

	for (unsigned i = 0; i < mySongs.size(); i++) {
		if ( mySongs[i].getArtist().find(artist) != string::npos ) {
			v.push_back( mySongs[i] );
		}
	}

	return v;
}

/*Search by Year
@param: year
Return: a vector containing all the SOngs in mySongs by year.*/

vector<Song> PlayList::searchByYear(unsigned year) const {
	vector<Song> v;

	for (unsigned i = 0; i < mySongs.size(); i++) {
		if (mySongs[i].getYear() == year ) {
			v.push_back( mySongs[i] );
		}
	}
	return v;

}

/*Search by Title Phrase
@param: phrase
Return: a vector containing all the Songs in mySongs by phrase*/

vector<Song> PlayList::searchByTitlePhrase(const string& phrase) const {
	vector<Song> v;

	for (unsigned i = 0; i < mySongs.size(); i++) {
			if (mySongs[i].getTitle() == phrase) {
				v.push_back( mySongs[i] );
			}
		}
		return v;

}

/*
Add Songs to mySongs
@param: song
Return: Nothing
*/

void  PlayList::addSong(const Song& newSong){
	mySongs.push_back(newSong);

}

/*
Remove Songs from mySongs
@param: Song
Return:N/a
*/

void PlayList::removeSong(const Song& aSong) {
	for (unsigned i = 0; i < mySongs.size(); i++){
		if(mySongs[i] == aSong){
			mySongs.erase(mySongs.begin() +i);
		}
	}
}


/*Saves playlist to file.
@param: N/a
Return: N/a*/

void PlayList::save() const {
	//use a loop that uses the write to function
	ofstream fout("testSong.txt");
	for (unsigned i = 0; i< mySongs.size(); i++){
		mySongs[i].writeTo(fout);
	}
	fout.close();
	//save title of text file in constructor so that the same file can be used.

}
/*
 * PlaylistTester.cpp
 *Lorrayya Williams
 *September 15, 2018
 *Begun by: Joel Adams, for CS 112 at Calvin College
 *  Created on: Sep 11, 2018
 *      Author: llw5
 */

#include "PlaylistTester.h"
#include "PlayList.h"
#include <iostream>
#include <cassert>
#include <fstream>

using namespace std;


void PlaylistTester::runTests() {
	cout << "\nTesting class PlayList..." << endl;
	testConstructors();
	testSearchByArtist();
	testsearchbyYear();
	testsearchbyTitlePhrase();
	testaddSong();
	testremovesong();
	testsave();
	cout << "All tests passed!" << endl;
}

void PlaylistTester::testConstructors() {
	cout << "- constructors..." << flush;
	PlayList pList("testSongs.txt");
	assert( pList.getNumSongs() == 4 );
	cout << " 0 " << flush;

	cout << " Passed!" << endl;
}

void PlaylistTester::testSearchByArtist() {
	cout << "- searchByArtist()... " << flush;
	// load a playlist with test songs
	PlayList pList("testSongs.txt");

	// empty case (0)
	vector<Song> searchResult = pList.searchByArtist("Cream");
	assert( searchResult.size() == 0 );
	cout << " 0 " << flush;

	// case of 1
	searchResult = pList.searchByArtist("Baez");
	assert( searchResult.size() == 1 );
	assert( searchResult[0].getTitle() == "Let It Be" );
	cout << " 1 " << flush;

	// case of 2
	searchResult = pList.searchByArtist("Beatles");
	assert( searchResult.size() == 2 );
	assert( searchResult[0].getTitle() == "Let It Be" );
	assert( searchResult[1].getTitle() == "Penny Lane" );
	cout << " 2 " << flush;

	cout << " Passed!" << endl;
}

void PlaylistTester::testsearchbyYear() {
	cout << "- searchByYear()... " << flush;
	// load a playlist with test songs
	PlayList pList("testSongs.txt");

	// empty case (0)
	vector<Song> searchResult = pList.searchByYear(3000);
	assert( searchResult.size() == 0 );
	cout << " 0 " << flush;

	// case of 1
	searchResult = pList.searchByYear(2012);
	assert( searchResult.size() == 1 );
	assert( searchResult[0].getYear() == 2012 );
	cout << " 1 " << flush;

	// case of 2
	searchResult = pList.searchByYear(1967);
	assert( searchResult.size() == 2 );
	assert( searchResult[0].getYear() == 1967 );
	assert( searchResult[1].getYear() == 1967 );
	cout << " 2 " << flush;

	cout << " Passed!" << endl;

}

void PlaylistTester::testsearchbyTitlePhrase() {
	cout << "- searchByTitlePhrase()... " << flush;
		// load a playlist with test songs
		PlayList pList("testSongs.txt");

		// empty case (0)
		vector<Song> searchResult = pList.searchByTitlePhrase("Hot Mess");
		assert( searchResult.size() == 0 );
		cout << " 0 " << flush;

		// case of 1
		searchResult = pList.searchByTitlePhrase("Call Me Maybe");
		assert( searchResult.size() == 1 );
		assert( searchResult[0].getTitle() == "Call Me Maybe" );
		cout << " 1 " << flush;

		// case of 2
		searchResult = pList.searchByTitlePhrase("Let It Be");
		assert( searchResult.size() == 2 );
		assert( searchResult[0].getTitle() == "Let It Be" );
		assert( searchResult[1].getTitle() == "Let It Be" );
		cout << " 2 " << flush;

		cout << " Passed!" << endl;
}

void PlaylistTester::testaddSong() {
	cout << "-addSong()..." << flush;
	Song s("jhsgha","Rihanna", 1987);
	PlayList pl("testSongs.txt");

	// empty case
	assert(pl.getNumSongs()== 4);
	pl.addSong(s);
	cout << " 0 " << flush;

	// case 1
	assert(pl.getNumSongs() == 5);
	vector<Song>searchresult = pl.searchByTitlePhrase("jhsgha");
	assert(searchresult.size()== 1);
	cout <<  " 1 " << flush;
	cout << " Passed! " << endl;

}

void PlaylistTester::testremovesong() {
	cout << "-removeSong..." << flush;
	PlayList pl("testSongs.txt");
	Song s("jhsgha","Rihanna", 1987);
	pl.removeSong(s);
	assert(pl.getNumSongs()==4);
	cout << " 0 " << flush;
	cout << " Passed! " <<  endl;

}

void PlaylistTester::testsave(){

	//make sure test save function was done correctly.
	cout << " -testsave..." << flush;

	Song s("Disturbia","Rihanna", 1987);
	PlayList pl("testSongs.txt");
	pl.addSong(s);
	pl.save();
	vector<Song> searchResult = pl.searchByTitlePhrase("Disturbia");
	assert( searchResult.size() == 1 );



	cout << " 0 " << flush;
	cout << " Passed! " << endl;


}
/*
 * Song.cpp defines the methods for class Song (see Song.h).
 *
    * Student Name: Lorrayya Williams
    * Date: September 15, 2018
    * Begun by: Joel Adams, for CS 112 at Calvin College.
    */

#include "Song.h"
#include <fstream>

 /* Song default constructor
    * Postcondition: myTitle and myArtist are empty strings
    *            && myYear == 0.
    */
Song::Song() {
	myTitle = "";
	myArtist = "";
	myYear = 0;
}
Song::Song(const string& title, const string& artist, unsigned year) {
	myTitle = title;
	myArtist = artist;
	myYear = year;
}
/* getter method for myTitle
* Return: myTitle
*/
string Song::getTitle() const {
  return myTitle;
}

/* getter method for myArtist
* Return: myArtist
*/
string Song::getArtist() const {
  return myArtist;
}

/* getter method for myYear
* Return: myYear
*/
unsigned Song::getYear() const {
  return myYear;
}

void Song::readFrom(istream& in) {
	getline(in, myTitle);
	getline(in, myArtist);
	string yearString;
	getline(in, yearString);
	myYear = atoi( yearString.c_str() );
}

void Song::writeTo(ostream& out) const {
		out << myTitle << '\n'
				<< myArtist << '\n'
				<< myYear  << '\n';
}

/*Intializes == operator
@param: song2
Return: True or False based on conditions.*/

bool Song::operator==(const Song& song2){
	if (getTitle() == song2.getTitle() && getArtist() == song2.getArtist() && getYear() == song2.getYear()){
		return true;
	}
	return false;
}

/*
Intializes != operator
@param: song2
Return: True or False based on conditions.
*/

bool Song::operator!=(const Song& song2){
	if (getTitle() != song2.getTitle() || getArtist() != song2.getArtist() || getYear() != song2.getYear()){
		return true;
	}
	return false;
}
/*
 * SongTester.cpp
 *
 *  Created on: Sep 11, 2018
 *      Author: llw5
 */

#include "SongTester.h"
#include <iostream>
#include <cassert>
#include "Song.h"
#include <fstream>
using namespace std;
SongTester::SongTester(){
}
void SongTester::runTests() {
	cout << "Testing class Song.." << endl;
	testConstructors();
	testReadFrom();
	testWriteTo();
	cout << "All tests passed!" << endl;
}


void SongTester::testConstructors() {
      cout << "- constructors ... " << flush;
      // default constructor
      Song s;
      assert( s.getTitle() == "" );
      assert( s.getArtist() == "" );
      assert( s.getYear() == 0 );
      cout << " 0 " << flush;
      // explicit constructor
      Song s1("Badge", "Cream", 1969);
      assert( s1.getTitle() == "Badge" );
      assert( s1.getArtist() == "Cream" );
      assert( s1.getYear() == 1969 );
      cout << " 1 " << flush;
      cout << " Passed!" << endl;
  }

void SongTester::testReadFrom() {
	cout << "- readFrom()... " << flush;
	ifstream fin("testSongs.txt");
	assert( fin.is_open() );
	Song s;

   // read first song in test playlist
	s.readFrom(fin);
	assert( s.getTitle() == "Call Me Maybe" );
	assert( s.getArtist() == "Carly Rae Jepsen" );
	assert( s.getYear() == 2012 );
	cout << " 0 " << flush;

   // read second song in test playlist
	string separator;
	getline(fin, separator);
	s.readFrom(fin);
	assert( s.getTitle() == "Let It Be" );
	assert( s.getArtist() == "The Beatles" );
	assert( s.getYear() == 1967 );
	cout << " 1 " << flush;

	// read third song in test playlist
	getline(fin, separator);
	s.readFrom(fin);
	assert( s.getTitle() == "Let It Be" );
	assert( s.getArtist() == "Joan Baez" );
	assert( s.getYear() == 1971 );
	cout << " 2 " << flush;

	// read fourth song in test playlist
	getline(fin, separator);
	s.readFrom(fin);
	assert( s.getTitle() == "Penny Lane");
	assert( s.getArtist() == "The Beatles" );
	assert( s.getYear() == 1967 );
	cout << " 3 " << flush;

	fin.close();
	cout << "Passed!" << endl;
}

void SongTester::testWriteTo() {
	cout << "- writeTo()... " << flush;

	// declare three songs
	Song s1("Badge", "Cream", 1969);
	Song s2("Godzilla", "Blue Oyster Cult", 1977);
	Song s3("Behind Blue Eyes", "The Who", 1971);

	// write the three songs to an output file
	ofstream fout("testSongOutput.txt");
	assert( fout.is_open() );
	s1.writeTo(fout);
	s2.writeTo(fout);
	s3.writeTo(fout);
	fout.close();

	// use readFrom() to see if writeTo() worked
	ifstream fin("testSongOutput.txt");
	assert( fin.is_open() );
	Song s4, s5, s6;

	// read and check the first song
	s4.readFrom(fin);
	assert( s4.getTitle() == "Badge" );
	assert( s4.getArtist() == "Cream" );
	assert( s4.getYear() == 1969 );
	cout << " 0 " << flush;

	// read and check the second song
	s5.readFrom(fin);
	assert( s5.getTitle() == "Godzilla" );
	assert( s5.getArtist() == "Blue Oyster Cult" );
	assert( s5.getYear() == 1977 );
	cout << " 1 " << flush;

	// read and check the third song
	s6.readFrom(fin);
	assert( s6.getTitle() == "Behind Blue Eyes" );
	assert( s6.getArtist() == "The Who" );
	assert( s6.getYear() == 1971 );
	cout << " 2 " << flush;

	fin.close();
	cout << " Passed!" << endl;
}

void SongTester::testoperator() {
	cout << "-Operator=..." << flush;
	ifstream fin("testSongs.txt");
	assert( fin.is_open() );
	Song s;
	s.readFrom(fin);
	Song s1;
	s.readFrom(fin);

	//asserts that songs that are the same return true
	assert(s == s1);

	//asserts that songs that only differ in title return false
	assert(s != s1);

	//assert that songs that only differ in artists return false

	//asserts that songs that only differe in year return false




}
llw5@gold26:~/cs112/proj01$ cat *.txt
Badge
Cream
1969
Godzilla
Blue Oyster Cult
1977
Behind Blue Eyes
The Who
1971
Call Me Maybe
Carly Rae Jepsen
2012

Let It Be
The Beatles
1967

Let It Be
Joan Baez
1971

Penny Lane
The Beatles
1967Call Me Maybe
Carly Rae Jepsen
2012
Let It Be
The Beatles
1967
Let It Be
Joan Baez
1971
Penny Lane
The Beatles
1967
Disturbia
Rihanna
1987
llw5@gold26:~/cs112/proj01$ ./Debug/        c exi   tip   exi t it
exit

Script done on Mon 17 Sep 2018 09:13:10 PM EDT
